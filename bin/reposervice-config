#!/bin/bash
#


export SERVICE_HOME=`pwd`
COMMAND_SETUP_FILE=$SERVICE_HOME/bin/reposervice-env

##
## Wipe out any existing reposervice-env file by echoing a command interpreter line to it.
## This file is gradually built with commands throughout this script
echo "#!/bin/bash" > $COMMAND_SETUP_FILE


function echoerr { echo "$@" >&2; }

##
## Function createDirectoryIfNeeded()
##
## Given the absolute file path parameter passed in, create any directories that would
## be needed to store the file.
##
## @param string $ABSOLUTE_FILE_PATH
##   The absolute file path
function createDirectoryIfNeeded {
	ABSOLUTE_FILE_PATH=$1
	ABSOLUTE_FILE_DIR=$(dirname $ABSOLUTE_FILE_PATH)
	if [ ! -d $ABSOLUTE_FILE_DIR ]; then
		mkdir -p $ABSOLUTE_FILE_DIR
	fi
}

##
## Function checkAndReplace()
##
## Test, using MD5 checksums, if the source file is different from the destination file.
## If so, output the diff and ask if the file should be updated.  If the file doesn't
## exist, silently copy it to the destination.
##
## @param string $SOURCE_FILE
##   The new, possibly modified, file location
## @param string $DESTINATION_FILE
##   The existing file location
##
function checkAndReplace {
	SOURCE_FILE=$1; DESTINATION_FILE=$2
  	if [ -f $DESTINATION_FILE ]; then
		if [ "$(openssl md5 $SOURCE_FILE | sed 's/.*(\(.*\))= \(.*\)$/\2/')" != "$(openssl md5 $DESTINATION_FILE | sed 's/.*(\(.*\))= \(.*\)$/\2/')" ]; then
			diff $DESTINATION_FILE $SOURCE_FILE
			read -p "FOUND UPDATED $DESTINATION_FILE -- replace? (y/N) " -n 1 -r
			echo
			if [[ $REPLY =~ ^[Yy]$ ]]; then
				cp -v $SOURCE_FILE $DESTINATION_FILE
			fi
		fi
	else
		cp -v $SOURCE_FILE $DESTINATION_FILE
	fi
}

##
## Function saveSetupAndReturn()
##
## Appends the entire function argument as a line in the repository environment
## setup file and returns the function argument.  This function is suitable for
## performing actions like:
##
##   saveSetupAndReturn "export SERVICE_HOME=`pwd`" && eval $SAVED_LINE
##
## which will save 'export SERVICE_HOME=`pwd`' in the repository environment setup
## file and save that line in the SAVED_LINE global environment variable so it can
## be `eval`ed after the function returns.
##
## @param string $SAVED_LINE
##   The shell command to be saved and returned
##
## @side_effect
##   SAVED_LINE global variable contains the contents of the function argument
##
function saveSetupAndReturn {
	SAVED_LINE="$@"
	echo $SAVED_LINE >> $COMMAND_SETUP_FILE
}



if [ ! -f config-values.sed ]; then
    echoerr "File 'config-values.sed' not found; cannot continue. Copy config-values.sed-sample to config-values.sed and edit."
    exit 1;
fi
if [ ! -h binaries/tomcat ]; then
    echoerr "Download Apache Tomcat; create symbolic link at binaries/tomcat to unpacked directory."
    exit 1;
fi
if [ ! -h binaries/solr ]; then 
    echoerr "Download Apache SOLR 3.x; create symbolic link at binaries/solr to unpacked directory."
    exit 1;
fi
if [ ! -h binaries/adore-djatoka ]; then 
    echoerr "Download adore-djatoka; create symbolic link at binaries/adore-djatoka to unpacked directory."
    exit 1;
fi
if [ ! -h binaries/fits ]; then 
    echoerr "Download fits; create symbolic link at binaries/fits to unpacked directory."
    exit 1;
fi
if [ ! -h binaries/joda-time.jar ]; then
	echoerr "Download joda-time; create symbolic link to the latest jar version at binaries/joda-time.jar."
	exit 1;
fi
if [ ! -x binaries/fits/fits.sh ]; then 
    chmod 755 binaries/fits/fits.sh
fi
if [ $(uname) = "Darwin" ]; then
	READLINK="greadlink"
else
	READLINK="readlink"
fi
if [ -x /usr/libexec/java_home ]; then
	saveSetupAndReturn "export JAVA_HOME=$(/usr/libexec/java_home)" && eval $SAVED_LINE
else
	saveSetupAndReturn "export JAVA_HOME=$($READLINK -f /usr/bin/java | sed 's:/bin/java::')" && eval $SAVED_LINE
fi

saveSetupAndReturn "CATALINA_DEBUG=" && eval $SAVED_LINE
saveSetupAndReturn "# CATALINA_DEBUG=\"-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n\"" && eval $SAVED_LINE

saveSetupAndReturn "export FEDORA_HOME=$SERVICE_HOME/fedora_home" && eval $SAVED_LINE
saveSetupAndReturn "export DRUPAL_HOME=$SERVICE_HOME/drupal" && eval $SAVED_LINE
saveSetupAndReturn "export CATALINA_HOME=$SERVICE_HOME/binaries/tomcat" && eval $SAVED_LINE
saveSetupAndReturn "export CATALINA_OPTS=\"\$CATALINA_DEBUG -XX:MaxPermSize=256m -Xmx1G -Xms128M\"" && eval $SAVED_LINE
saveSetupAndReturn "export PATH=$FEDORA_HOME/server/bin:$FEDORA_HOME/client/bin:$CATALINA_HOME/bin:$SERVICE_HOME/bin:$PATH" && eval $SAVED_LINE
saveSetupAndReturn "alias lesscatalinalog=\"less $CATALINA_HOME/logs/catalina.out\"" && eval $SAVED_LINE
saveSetupAndReturn "alias lessfedoralog=\"less $FEDORA_HOME/server/logs/fedora.log\"" && eval $SAVED_LINE
saveSetupAndReturn "alias lessgsearchlog=\"less $FEDORA_HOME/server/logs/fedoragsearch.daily.log\"" && eval $SAVED_LINE
saveSetupAndReturn "alias ssh_isl_staging=\"ssh -fNg -R 19000:localhost:9000 -L 13306:localhost:3306 -L 18080:localhost:8080 -o ServerAliveInterval=10 islandora-02.lyrasistechnology.org\"" && eval $SAVED_LINE
saveSetupAndReturn "alias ssh_isl_prod=\"ssh -fNg -R 29000:localhost:9000 -L 23306:localhost:3306 -L 28080:localhost:8080 -o ServerAliveInterval=10 islandora.lyrasistechnology.org\"" && eval $SAVED_LINE

if [ ! -d $FEDORA_HOME/gsearch/solr ]; then
    echoerr "Directory '$FEDORA_HOME/gsearch/solr' not found; copy $SERVICE_HOME/binaries/solr/examples/solr to $FEDORA_HOME/gsearch"
    exit 1;
fi

if [ -f $FEDORA_HOME/data/fedora-xacml-policies/repository-policies/default/deny-inactive-or-deleted-objects-or-datastreams-if-not-administrator.xml ]; then
    echoerr "Found deny-inactive-or-deleted-objects-or-datastreams-if-not-administrator XACML policy."
    echoerr "This will cause the Islandora Simple Workflow functionality to fail."
    read -p "Remove this file? (y/N) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        rm $FEDORA_HOME/data/fedora-xacml-policies/repository-policies/default/deny-inactive-or-deleted-objects-or-datastreams-if-not-administrator.xml
	echoerr "Restart Tomcat, if needed, for this to take effect."
    fi
fi


###
### BEGIN Copied and Adapted from djatoka distribution
###
# Define DJATOKA_HOME dynamically
saveSetupAndReturn "export DJATOKA_HOME=$SERVICE_HOME/binaries/adore-djatoka" && eval $SAVED_LINE
DJATOKA_LAUNCHDIR=$DJATOKA_HOME/bin
DJATOKA_LIBPATH=$DJATOKA_HOME/lib

if [ `uname` = 'Linux' ] ; then
  if [ `uname -m` = "x86_64" ] ; then
    # Assume Linux AMD 64 has 64-bit Java
    DJATOKA_PLATFORM="Linux-x86-64"
    saveSetupAndReturn "export DJATOKA_LD_LIBRARY_PATH=\"$DJATOKA_LIBPATH/$DJATOKA_PLATFORM\"" && eval $SAVED_LINE
    KAKADU_LIBRARY_PATH="-DLD_LIBRARY_PATH=$DJATOKA_LIBPATH/$DJATOKA_PLATFORM"
  else
    # 32-bit Java
    DJATOKA_PLATFORM="Linux-x86-32"
    saveSetupAndReturn "export DJATOKA_LD_LIBRARY_PATH=\"$DJATOKA_LIBPATH/$DJATOKA_PLATFORM\"" && eval $SAVED_LINE
    KAKADU_LIBRARY_PATH="-DLD_LIBRARY_PATH=$DJATOKA_LIBPATH/$DJATOKA_PLATFORM"
  fi
elif [ `uname` = 'Darwin' ] ; then
  # Mac OS X
  DJATOKA_PLATFORM="Mac-x86"
  saveSetupAndReturn "export DJATOKA_DYLD_LIBRARY_PATH=\"$DJATOKA_LIBPATH/$DJATOKA_PLATFORM\"" && eval $SAVED_LINE
  KAKADU_LIBRARY_PATH="-DDYLD_LIBRARY_PATH=$DJATOKA_LIBPATH/$DJATOKA_PLATFORM"
elif [ `uname` = 'SunOS' ] ; then
  if [ `uname -p` = "i386" ] ; then
    # Assume Solaris x86
    DJATOKA_PLATFORM="Solaris-x86"
    saveSetupAndReturn "export DJATOKA_LD_LIBRARY_PATH=\"$DJATOKA_LIBPATH/$DJATOKA_PLATFORM\"" && eval $SAVED_LINE
  else
    # Sparcv9
    DJATOKA_PLATFORM="Solaris-Sparcv9"
    saveSetupAndReturn "export DJATOKA_LD_LIBRARY_PATH=\"$DJATOKA_LIBPATH/$DJATOKA_PLATFORM\"" && eval $SAVED_LINE
  fi
else
  echoerr "djatoka env: Unsupported DJATOKA_PLATFORM: `uname`"
fi

saveSetupAndReturn "export KAKADU_HOME=$DJATOKA_HOME/bin/$DJATOKA_PLATFORM" && eval $SAVED_LINE
saveSetupAndReturn "CATALINA_OPTS=\"\$CATALINA_OPTS -Djava.awt.headless=true -Dkakadu.home=$KAKADU_HOME -Djava.library.path=$DJATOKA_LIBPATH/$DJATOKA_PLATFORM $KAKADU_LIBRARY_PATH\"" && eval $SAVED_LINE
###
### END Copied and Adapted from djatoka distribution
###


SED_TEMPLATES_DIR=$SERVICE_HOME/sed_templates
EXPANDED_CONFIG_DIR=$SERVICE_HOME/sed_substituted_files
if [ -d $EXPANDED_CONFIG_DIR ]; then
	rm -rf $EXPANDED_CONFIG_DIR
fi
mkdir $EXPANDED_CONFIG_DIR

SED_CONFIG_SUBSTITUTES=$(mktemp "$EXPANDED_CONFIG_DIR/temp.XXXXXXX")
cat config-values.sed >> $SED_CONFIG_SUBSTITUTES
## Add dynamically generated tokens, such as those with absolute file paths
printf 's:${SERVICE_HOME}:%s:\n' $SERVICE_HOME >> $SED_CONFIG_SUBSTITUTES
printf 's:${FEDORA_HOME}:%s:\n' $FEDORA_HOME >> $SED_CONFIG_SUBSTITUTES
printf 's:${DRUPAL_HOME}:%s:\n' $DRUPAL_HOME >> $SED_CONFIG_SUBSTITUTES
printf 's:${CATALINA_HOME}:%s:\n' $CATALINA_HOME >> $SED_CONFIG_SUBSTITUTES
printf 's:${PATH_KAKADU}:%s/kdu_compress:\n' $KAKADU_HOME >> $SED_CONFIG_SUBSTITUTES
printf 's:${PATH_FITS}:%s/binaries/fits/fits.sh:\n' $SERVICE_HOME >> $SED_CONFIG_SUBSTITUTES
printf 's/${DATA_ENTRY_DRUPAL_UID}/%s/\n' $DATA_ENTRY_DRUPAL_UID >> $SED_CONFIG_SUBSTITUTES
printf 's/${SUPERVISOR_DRUPAL_UID}/%s/\n' $SUPERVISOR_DRUPAL_UID >> $SED_CONFIG_SUBSTITUTES


starting_cwd=$(pwd)
cd $SED_TEMPLATES_DIR

## Each directory in $SED_TEMPLATES_DIR represents a location where config files that
## have been substituted will be written.  For convenience, within the $SED_TEMPLATES_DIR
## directories are replaced with the '#' symbol.  NOTE: `find * ...` intentionally excludes 
## hidden files/directories.
for line in $(find * -type d -print); do
	directory=$(echo $line | tr \# /)
	createDirectoryIfNeeded $EXPANDED_CONFIG_DIR/$directory
	
	cd $SED_TEMPLATES_DIR/$line
	for filename in $(find * -type f -print); do
	
		## Calculate paths for the source file, the file with substitutions, and the destination file location
		SRC_FILE=$SED_TEMPLATES_DIR/$line/$filename
		SUBS_FILE=$EXPANDED_CONFIG_DIR/$directory/$filename
		DEST_FILE=$SERVICE_HOME/$directory/$filename
		
		## Create intermediate directories if needed
		createDirectoryIfNeeded $SUBS_FILE
		createDirectoryIfNeeded $DEST_FILE
		
		## Perform token replacement
		sed -f $SED_CONFIG_SUBSTITUTES $SRC_FILE > $SUBS_FILE
	
		## For Kakadu to function, we need to inject a LD_LIBRARY_PATH (Linux) or 
		## DYLD_LIBRARY_PATH (MacOSX) environment variable into the Drupal environment. 
		## We're choosing to do this by appending a PHP putenv() at the end of the
		## Drupal settings.php File
		if [ "$SRC_FILE" == "$SED_TEMPLATES_DIR/drupal#sites#default/settings.php" ]; then
			if [ -n "$DJATOKA_LD_LIBRARY_PATH" ]; then
    			echo "putenv(\"LD_LIBRARY_PATH=$DJATOKA_LD_LIBRARY_PATH\");" >> $SUBS_FILE
			elif [ -n "$DJATOKA_DYLD_LIBRARY_PATH" ]; then
				echo "putenv(\"DYLD_LIBRARY_PATH=$DJATOKA_DYLD_LIBRARY_PATH\");" >> $SUBS_FILE
			fi
			if [ `uname` = 'Darwin' ] ; then
				## Developer is using Bitnami MAMPstack, which sets its own environment variables for
				## ImageMagick, so we have to override them here.  Sucks, but what else can you do...
				echo "putenv(\"MAGICK_HOME=/usr/local\");" >> $SUBS_FILE
				echo "putenv(\"MAGICK_CONFIGURE_PATH=/usr/local/lib/ImageMagick/config-Q16/\");" >> $SUBS_FILE
				echo "putenv(\"MAGICK_CODER_MODULE_PATH=/usr/local/lib/ImageMagick/modules-Q16/coders\");" >> $SUBS_FILE
			fi
		fi

		## See if the file is different and offer to replace
		checkAndReplace $SUBS_FILE $DEST_FILE
	done
done

cd $starting_cwd
rm $SED_CONFIG_SUBSTITUTES

BINARY_FILES=$( cat <<EOF
$FEDORA_HOME/install/fedora-demo.war|$CATALINA_HOME/webapps
$FEDORA_HOME/install/fedora.war|$CATALINA_HOME/webapps
$FEDORA_HOME/install/fop.war|$CATALINA_HOME/webapps
$FEDORA_HOME/install/imagemanip.war|$CATALINA_HOME/webapps
$FEDORA_HOME/install/saxon.war|$CATALINA_HOME/webapps
$SERVICE_HOME/binaries/adore-djatoka/dist/adore-djatoka.war|$CATALINA_HOME/webapps
$SERVICE_HOME/islandora_drupal_filter/target/fcrepo-drupalauthfilter-3.6.2.jar|$CATALINA_HOME/webapps/fedora/WEB-INF/lib
$SERVICE_HOME/gsearch/FgsBuild/fromsource/fedoragsearch.war|$CATALINA_HOME/webapps
$SERVICE_HOME/islandora/policies/permit-apim-to-authenticated-user.xml|$FEDORA_HOME/data/fedora-xacml-policies/repository-policies/default
$SERVICE_HOME/islandora/policies/permit-getDatastream-unrestricted.xml|$FEDORA_HOME/data/fedora-xacml-policies/repository-policies/default
$SERVICE_HOME/islandora/policies/permit-getDatastreamHistory-unrestricted.xml|$FEDORA_HOME/data/fedora-xacml-policies/repository-policies/default
$SERVICE_HOME/islandora/policies/permit-upload-to-authenticated-user.xml|$FEDORA_HOME/data/fedora-xacml-policies/repository-policies/default
EOF
)

for line in $BINARY_FILES; do
    SOURCE_FILE=$(echo $line | cut -d"|" -f1)
    DEST_DIR=$(echo $line | cut -d"|" -f2)
    BASE_FILENAME=$(basename $SOURCE_FILE)
    DEST_FILE=$DEST_DIR/$BASE_FILENAME
    if [ ! -f $SOURCE_FILE ]; then 
    	echoerr "Binary source file $SOURCE_FILE doesn't exist, and it probably should."
    else
    	if [ ! -d $DEST_DIR ]; then
    		echoerr "Binary destination directory $DEST_DIR doesn't exist, and it probably should."
    	else
			checkAndReplace $SOURCE_FILE $DEST_FILE
    	fi
    fi
done

# THIS IS A TEMPORARY FILE.  Until $SERVICE_HOME/bin/reposervice-config
# is refactored from bash to Perl (and the config file format redone)
# this file is needed to drive the repositesetup script.
mv $SERVICE_HOME/binaries/config-local.conf $SERVICE_HOME/config-local.conf

echo "#"
echo "#"
echo "# Now don't forget to run the bootstrap in order to get the right shell environment setup."
echo "cd $SERVICE_HOME && source ./bootstrap.sh"
